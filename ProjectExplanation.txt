Project: Real-Time Collaborative Markdown Editor

1) Brief about this project
- A full‑stack web app for editing Markdown collaboratively in real time.
- Multiple clients connect to the same document via WebSockets (Socket.IO); changes sync instantly across all connected users.
- The document content is persisted in MongoDB so it survives server restarts and user reconnects.

2) Build
- Frontend (React):
  - Renders the UI with a textarea for Markdown input and a live preview.
  - Connects to the backend via Socket.IO client.
  - Uses `marked` to convert Markdown to HTML and `react-syntax-highlighter` (Prism themes) to render fenced code blocks.
- Backend (Node.js + Express + Socket.IO):
  - Manages WebSocket connections and room membership per document ID.
  - Loads/saves document content to MongoDB via Mongoose.
- Database (MongoDB):
  - Stores documents (`_id` is the document identifier, `content` is the Markdown string).

3) Data and realtime flow
- Client connects → backend assigns a Socket.IO connection.
- Client requests a document by ID (in this code, a constant `default-doc`).
  - If the document exists: backend emits `load-document` with stored content.
  - If not: backend creates it and then emits empty content.
- While typing:
  - The client emits `send-changes` with the current text to the room.
  - Other clients in the same room receive `receive-changes` and update their editor state.
  - The client also emits `save-document` so the backend persists the latest content.

4) Important files
- backend/server.js: Express+HTTP server, Socket.IO setup, MongoDB connection, realtime events, and persistence.
- backend/models/Document.js: Mongoose schema/model for documents.
- frontend/src/index.js: React entry point.
- frontend/src/App.js: Page shell and layout.
- frontend/src/Editor.js: Core editor logic (Socket.IO events, state, Markdown rendering).
- frontend/src/Highlight.js: Code block syntax highlighting (Prism theme).
- frontend/public/index.html: App HTML shell.

5) Realtime events (Socket.IO)
- From client to server:
  - `get-document` (docId): ask server for the document; server responds with `load-document`.
  - `send-changes` (text): broadcast current content to other clients in the same doc room.
  - `save-document` (text): persist latest content in MongoDB.
- From server to client:
  - `load-document` (text): initial content of the requested document.
  - `receive-changes` (text): content changes made by other clients.

6) Persistence model (MongoDB)
- Collection: documents
- Schema: { _id: String, content: String } with timestamps.
- Lookup: `Document.findById(docId)`
- Upsert on first open: create if not found.
- Update on save: `findByIdAndUpdate(docId, { content })`

7) UI behavior
- Two-column layout:
  - Left: editable `<textarea>` bound to state.
  - Right: Markdown preview using `marked`; fenced code blocks rendered with `Highlight`.
- Dark mode toggle switches the theme for both the editor and preview (including syntax highlighting theme selection).

8) How to run (development)
- Prerequisites:
  - Node.js (LTS recommended)
  - MongoDB running locally at mongodb://127.0.0.1:27017
- Backend:
  - In a terminal: `cd backend`
  - Install deps: `npm install`
  - Start: `node server.js` (listens on http://localhost:5000)
- Frontend:
  - New terminal: `cd frontend`
  - Install deps: `npm install`
  - Start: `npm start` (opens http://localhost:3000)

9) Build and deploy (frontend)
- Development uses Create React App dev server.
- Production build:
  - `cd frontend && npm run build`
  - Outputs static assets under `frontend/build/` ready to deploy to any static host.

10) Error handling and caveats
- This simple implementation broadcasts entire text content on change. For large documents or high-frequency edits, consider operational transforms (OT) or CRDTs to reduce conflicts and bandwidth.
- No authentication/authorization is implemented; any client can connect and edit the `default-doc`.
- CORS is configured to `*` in development; restrict in production.

11) Security considerations (production hardening)
- Add authentication and per-document access control.
- Validate and sanitize inputs; ensure Markdown output is safe (e.g., use `marked` with sanitizer or DOMPurify if needed).
- Restrict CORS origins and use HTTPS.
- Use environment variables for MongoDB connection strings and secrets.

12) Extensibility ideas
- Multiple documents and a document list UI (create, open, rename, delete).
- Shareable links with unique document IDs.
- Presence indicators (who is online, cursors, selection ranges) via Socket.IO.
- Version history and diff/restore.
- Export options: Markdown/HTML/PDF (client-side via html2canvas+jsPDF or server-side headless rendering).
- Collaborative conflict resolution using OT or CRDT (e.g., Y.js).

13) Tech stack summary
- Frontend: React, marked, react-syntax-highlighter (Prism), CSS.
- Backend: Node.js, Express, Socket.IO, Mongoose.
- Database: MongoDB.

14) Quick glossary
- Socket.IO: realtime bidirectional communication between browser and server over WebSockets/fallbacks.
- Room: a logical channel in Socket.IO used here per document ID for broadcasting changes.
- Markdown: lightweight markup language converted to HTML with `marked`.
- Prism: syntax highlighting engine used by `react-syntax-highlighter` themes.


